// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings for the C native calc library.
class CalcNativeFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CalcNativeFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CalcNativeFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  double additon(
    double a,
    double b,
  ) {
    return _additon(
      a,
      b,
    );
  }

  late final _additonPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'additon');
  late final _additon =
      _additonPtr.asFunction<double Function(double, double)>();

  double subtract(
    double a,
    double b,
  ) {
    return _subtract(
      a,
      b,
    );
  }

  late final _subtractPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'subtract');
  late final _subtract =
      _subtractPtr.asFunction<double Function(double, double)>();

  double multiply(
    double a,
    double b,
  ) {
    return _multiply(
      a,
      b,
    );
  }

  late final _multiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'multiply');
  late final _multiply =
      _multiplyPtr.asFunction<double Function(double, double)>();

  double divide(
    double a,
    double b,
  ) {
    return _divide(
      a,
      b,
    );
  }

  late final _dividePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'divide');
  late final _divide = _dividePtr.asFunction<double Function(double, double)>();
}
